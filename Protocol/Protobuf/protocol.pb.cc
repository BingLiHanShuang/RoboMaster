// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class PosPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PosPoint> {
} _PosPoint_default_instance_;
class ScanResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScanResult> {
} _ScanResult_default_instance_;
class PadPassDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PadPass> {
} _PadPass_default_instance_;
class VideoRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoRecord> {
} _VideoRecord_default_instance_;
class MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message> {
} _Message_default_instance_;

namespace protobuf_protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosPoint, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResult, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResult, picrutesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResult, angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadPass, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadPass, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecord, control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecord, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecord, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecord, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecord, operator__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, messagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PosPoint)},
  { 6, -1, sizeof(ScanResult)},
  { 14, -1, sizeof(PadPass)},
  { 20, -1, sizeof(VideoRecord)},
  { 29, -1, sizeof(Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PosPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PadPass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _PosPoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ScanResult_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PadPass_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _VideoRecord_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Message_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PosPoint_default_instance_.DefaultConstruct();
  _ScanResult_default_instance_.DefaultConstruct();
  _PadPass_default_instance_.DefaultConstruct();
  _VideoRecord_default_instance_.DefaultConstruct();
  _Message_default_instance_.DefaultConstruct();
  _ScanResult_default_instance_.get_mutable()->picrutesize_ = const_cast< ::PosPoint*>(
      ::PosPoint::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016protocol.proto\" \n\010PosPoint\022\t\n\001x\030\001 \001(\002\022"
      "\t\n\001y\030\002 \001(\002\"h\n\nScanResult\022\033\n\010position\030\001 \003"
      "(\0132\t.PosPoint\022\036\n\013picrutesize\030\004 \001(\0132\t.Pos"
      "Point\022\016\n\006result\030\002 \001(\t\022\r\n\005angle\030\003 \001(\002\"(\n\007"
      "PadPass\022\013\n\003pad\030\001 \001(\014\022\020\n\010password\030\002 \001(\014\"\204"
      "\002\n\013VideoRecord\022)\n\007control\030\001 \001(\0162\030.VideoR"
      "ecord.ControlType\022\'\n\006status\030\002 \001(\0162\027.Vide"
      "oRecord.StatusType\022\022\n\nDeviceName\030\003 \001(\t\022\020"
      "\n\010DeviceId\030\004 \001(\t\022\020\n\010Operator\030\005 \001(\t\"8\n\013Co"
      "ntrolType\022\010\n\004NULL\020\000\022\t\n\005Start\020\001\022\010\n\004Stop\020\002"
      "\022\n\n\006Status\020\003\"/\n\nStatusType\022\t\n\005NULL1\020\000\022\r\n"
      "\tRecording\020\001\022\007\n\003Off\020\002\"\211\001\n\007Message\022)\n\013mes"
      "sagetype\030\001 \001(\0162\024.Message.MessageType\022\014\n\004"
      "data\030\002 \001(\014\"E\n\013MessageType\022\010\n\004NULL\020\000\022\016\n\nS"
      "canResult\020\001\022\013\n\007PadPass\020\002\022\017\n\013VideoRecord\020"
      "\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocol_2eproto

const ::google::protobuf::EnumDescriptor* VideoRecord_ControlType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool VideoRecord_ControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoRecord_ControlType VideoRecord::NULL_;
const VideoRecord_ControlType VideoRecord::Start;
const VideoRecord_ControlType VideoRecord::Stop;
const VideoRecord_ControlType VideoRecord::Status;
const VideoRecord_ControlType VideoRecord::ControlType_MIN;
const VideoRecord_ControlType VideoRecord::ControlType_MAX;
const int VideoRecord::ControlType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VideoRecord_StatusType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[1];
}
bool VideoRecord_StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoRecord_StatusType VideoRecord::NULL1;
const VideoRecord_StatusType VideoRecord::Recording;
const VideoRecord_StatusType VideoRecord::Off;
const VideoRecord_StatusType VideoRecord::StatusType_MIN;
const VideoRecord_StatusType VideoRecord::StatusType_MAX;
const int VideoRecord::StatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[2];
}
bool Message_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_MessageType Message::NULL_;
const Message_MessageType Message::ScanResult;
const Message_MessageType Message::PadPass;
const Message_MessageType Message::VideoRecord;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PosPoint::kXFieldNumber;
const int PosPoint::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PosPoint::PosPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PosPoint)
}
PosPoint::PosPoint(const PosPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:PosPoint)
}

void PosPoint::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

PosPoint::~PosPoint() {
  // @@protoc_insertion_point(destructor:PosPoint)
  SharedDtor();
}

void PosPoint::SharedDtor() {
}

void PosPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosPoint::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0].descriptor;
}

const PosPoint& PosPoint::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

PosPoint* PosPoint::New(::google::protobuf::Arena* arena) const {
  PosPoint* n = new PosPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PosPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:PosPoint)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool PosPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PosPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PosPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PosPoint)
  return false;
#undef DO_
}

void PosPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PosPoint)
  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:PosPoint)
}

::google::protobuf::uint8* PosPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PosPoint)
  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PosPoint)
  return target;
}

size_t PosPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PosPoint)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PosPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PosPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PosPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PosPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PosPoint)
    MergeFrom(*source);
  }
}

void PosPoint::MergeFrom(const PosPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PosPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void PosPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PosPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosPoint::CopyFrom(const PosPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PosPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosPoint::IsInitialized() const {
  return true;
}

void PosPoint::Swap(PosPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PosPoint::InternalSwap(PosPoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PosPoint::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PosPoint

// float x = 1;
void PosPoint::clear_x() {
  x_ = 0;
}
float PosPoint::x() const {
  // @@protoc_insertion_point(field_get:PosPoint.x)
  return x_;
}
void PosPoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PosPoint.x)
}

// float y = 2;
void PosPoint::clear_y() {
  y_ = 0;
}
float PosPoint::y() const {
  // @@protoc_insertion_point(field_get:PosPoint.y)
  return y_;
}
void PosPoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PosPoint.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanResult::kPositionFieldNumber;
const int ScanResult::kPicrutesizeFieldNumber;
const int ScanResult::kResultFieldNumber;
const int ScanResult::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanResult::ScanResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScanResult)
}
ScanResult::ScanResult(const ScanResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_picrutesize()) {
    picrutesize_ = new ::PosPoint(*from.picrutesize_);
  } else {
    picrutesize_ = NULL;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:ScanResult)
}

void ScanResult::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&picrutesize_, 0, reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&picrutesize_) + sizeof(angle_));
  _cached_size_ = 0;
}

ScanResult::~ScanResult() {
  // @@protoc_insertion_point(destructor:ScanResult)
  SharedDtor();
}

void ScanResult::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete picrutesize_;
  }
}

void ScanResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanResult::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1].descriptor;
}

const ScanResult& ScanResult::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanResult* ScanResult::New(::google::protobuf::Arena* arena) const {
  ScanResult* n = new ScanResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ScanResult)
  position_.Clear();
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && picrutesize_ != NULL) {
    delete picrutesize_;
  }
  picrutesize_ = NULL;
  angle_ = 0;
}

bool ScanResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScanResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PosPoint position = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string result = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ScanResult.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PosPoint picrutesize = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picrutesize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScanResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScanResult)
  return false;
#undef DO_
}

void ScanResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScanResult)
  // repeated .PosPoint position = 1;
  for (unsigned int i = 0, n = this->position_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(i), output);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ScanResult.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // float angle = 3;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  // .PosPoint picrutesize = 4;
  if (this->has_picrutesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->picrutesize_, output);
  }

  // @@protoc_insertion_point(serialize_end:ScanResult)
}

::google::protobuf::uint8* ScanResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ScanResult)
  // repeated .PosPoint position = 1;
  for (unsigned int i = 0, n = this->position_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->position(i), false, target);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ScanResult.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // float angle = 3;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  // .PosPoint picrutesize = 4;
  if (this->has_picrutesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->picrutesize_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ScanResult)
  return target;
}

size_t ScanResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScanResult)
  size_t total_size = 0;

  // repeated .PosPoint position = 1;
  {
    unsigned int count = this->position_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position(i));
    }
  }

  // string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // .PosPoint picrutesize = 4;
  if (this->has_picrutesize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->picrutesize_);
  }

  // float angle = 3;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScanResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScanResult)
    MergeFrom(*source);
  }
}

void ScanResult::MergeFrom(const ScanResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_.MergeFrom(from.position_);
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_picrutesize()) {
    mutable_picrutesize()->::PosPoint::MergeFrom(from.picrutesize());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void ScanResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResult::CopyFrom(const ScanResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResult::IsInitialized() const {
  return true;
}

void ScanResult::Swap(ScanResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanResult::InternalSwap(ScanResult* other) {
  position_.UnsafeArenaSwap(&other->position_);
  result_.Swap(&other->result_);
  std::swap(picrutesize_, other->picrutesize_);
  std::swap(angle_, other->angle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanResult::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanResult

// repeated .PosPoint position = 1;
int ScanResult::position_size() const {
  return position_.size();
}
void ScanResult::clear_position() {
  position_.Clear();
}
const ::PosPoint& ScanResult::position(int index) const {
  // @@protoc_insertion_point(field_get:ScanResult.position)
  return position_.Get(index);
}
::PosPoint* ScanResult::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:ScanResult.position)
  return position_.Mutable(index);
}
::PosPoint* ScanResult::add_position() {
  // @@protoc_insertion_point(field_add:ScanResult.position)
  return position_.Add();
}
::google::protobuf::RepeatedPtrField< ::PosPoint >*
ScanResult::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:ScanResult.position)
  return &position_;
}
const ::google::protobuf::RepeatedPtrField< ::PosPoint >&
ScanResult::position() const {
  // @@protoc_insertion_point(field_list:ScanResult.position)
  return position_;
}

// .PosPoint picrutesize = 4;
bool ScanResult::has_picrutesize() const {
  return this != internal_default_instance() && picrutesize_ != NULL;
}
void ScanResult::clear_picrutesize() {
  if (GetArenaNoVirtual() == NULL && picrutesize_ != NULL) delete picrutesize_;
  picrutesize_ = NULL;
}
const ::PosPoint& ScanResult::picrutesize() const {
  // @@protoc_insertion_point(field_get:ScanResult.picrutesize)
  return picrutesize_ != NULL ? *picrutesize_
                         : *::PosPoint::internal_default_instance();
}
::PosPoint* ScanResult::mutable_picrutesize() {
  
  if (picrutesize_ == NULL) {
    picrutesize_ = new ::PosPoint;
  }
  // @@protoc_insertion_point(field_mutable:ScanResult.picrutesize)
  return picrutesize_;
}
::PosPoint* ScanResult::release_picrutesize() {
  // @@protoc_insertion_point(field_release:ScanResult.picrutesize)
  
  ::PosPoint* temp = picrutesize_;
  picrutesize_ = NULL;
  return temp;
}
void ScanResult::set_allocated_picrutesize(::PosPoint* picrutesize) {
  delete picrutesize_;
  picrutesize_ = picrutesize;
  if (picrutesize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ScanResult.picrutesize)
}

// string result = 2;
void ScanResult::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScanResult::result() const {
  // @@protoc_insertion_point(field_get:ScanResult.result)
  return result_.GetNoArena();
}
void ScanResult::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScanResult.result)
}
#if LANG_CXX11
void ScanResult::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScanResult.result)
}
#endif
void ScanResult::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScanResult.result)
}
void ScanResult::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScanResult.result)
}
::std::string* ScanResult::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:ScanResult.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanResult::release_result() {
  // @@protoc_insertion_point(field_release:ScanResult.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanResult::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:ScanResult.result)
}

// float angle = 3;
void ScanResult::clear_angle() {
  angle_ = 0;
}
float ScanResult::angle() const {
  // @@protoc_insertion_point(field_get:ScanResult.angle)
  return angle_;
}
void ScanResult::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:ScanResult.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PadPass::kPadFieldNumber;
const int PadPass::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PadPass::PadPass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PadPass)
}
PadPass::PadPass(const PadPass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pad().size() > 0) {
    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:PadPass)
}

void PadPass::SharedCtor() {
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PadPass::~PadPass() {
  // @@protoc_insertion_point(destructor:PadPass)
  SharedDtor();
}

void PadPass::SharedDtor() {
  pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PadPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PadPass::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2].descriptor;
}

const PadPass& PadPass::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

PadPass* PadPass::New(::google::protobuf::Arena* arena) const {
  PadPass* n = new PadPass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PadPass::Clear() {
// @@protoc_insertion_point(message_clear_start:PadPass)
  pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PadPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PadPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pad = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PadPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PadPass)
  return false;
#undef DO_
}

void PadPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PadPass)
  // bytes pad = 1;
  if (this->pad().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pad(), output);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:PadPass)
}

::google::protobuf::uint8* PadPass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PadPass)
  // bytes pad = 1;
  if (this->pad().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pad(), target);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PadPass)
  return target;
}

size_t PadPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PadPass)
  size_t total_size = 0;

  // bytes pad = 1;
  if (this->pad().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pad());
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PadPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PadPass)
  GOOGLE_DCHECK_NE(&from, this);
  const PadPass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PadPass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PadPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PadPass)
    MergeFrom(*source);
  }
}

void PadPass::MergeFrom(const PadPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PadPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.pad().size() > 0) {

    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void PadPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PadPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PadPass::CopyFrom(const PadPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PadPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadPass::IsInitialized() const {
  return true;
}

void PadPass::Swap(PadPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PadPass::InternalSwap(PadPass* other) {
  pad_.Swap(&other->pad_);
  password_.Swap(&other->password_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PadPass::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PadPass

// bytes pad = 1;
void PadPass::clear_pad() {
  pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PadPass::pad() const {
  // @@protoc_insertion_point(field_get:PadPass.pad)
  return pad_.GetNoArena();
}
void PadPass::set_pad(const ::std::string& value) {
  
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PadPass.pad)
}
#if LANG_CXX11
void PadPass::set_pad(::std::string&& value) {
  
  pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PadPass.pad)
}
#endif
void PadPass::set_pad(const char* value) {
  
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PadPass.pad)
}
void PadPass::set_pad(const void* value, size_t size) {
  
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PadPass.pad)
}
::std::string* PadPass::mutable_pad() {
  
  // @@protoc_insertion_point(field_mutable:PadPass.pad)
  return pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadPass::release_pad() {
  // @@protoc_insertion_point(field_release:PadPass.pad)
  
  return pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadPass::set_allocated_pad(::std::string* pad) {
  if (pad != NULL) {
    
  } else {
    
  }
  pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pad);
  // @@protoc_insertion_point(field_set_allocated:PadPass.pad)
}

// bytes password = 2;
void PadPass::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PadPass::password() const {
  // @@protoc_insertion_point(field_get:PadPass.password)
  return password_.GetNoArena();
}
void PadPass::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PadPass.password)
}
#if LANG_CXX11
void PadPass::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PadPass.password)
}
#endif
void PadPass::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PadPass.password)
}
void PadPass::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PadPass.password)
}
::std::string* PadPass::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:PadPass.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadPass::release_password() {
  // @@protoc_insertion_point(field_release:PadPass.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadPass::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:PadPass.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoRecord::kControlFieldNumber;
const int VideoRecord::kStatusFieldNumber;
const int VideoRecord::kDeviceNameFieldNumber;
const int VideoRecord::kDeviceIdFieldNumber;
const int VideoRecord::kOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoRecord::VideoRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VideoRecord)
}
VideoRecord::VideoRecord(const VideoRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicename().size() > 0) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operator_().size() > 0) {
    operator__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operator__);
  }
  ::memcpy(&control_, &from.control_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&control_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:VideoRecord)
}

void VideoRecord::SharedCtor() {
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&control_) + sizeof(status_));
  _cached_size_ = 0;
}

VideoRecord::~VideoRecord() {
  // @@protoc_insertion_point(destructor:VideoRecord)
  SharedDtor();
}

void VideoRecord::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoRecord::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3].descriptor;
}

const VideoRecord& VideoRecord::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoRecord* VideoRecord::New(::google::protobuf::Arena* arena) const {
  VideoRecord* n = new VideoRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoRecord)
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&control_) + sizeof(status_));
}

bool VideoRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VideoRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VideoRecord.ControlType control = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control(static_cast< ::VideoRecord_ControlType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VideoRecord.StatusType status = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::VideoRecord_StatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeviceName = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VideoRecord.DeviceName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeviceId = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VideoRecord.DeviceId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Operator = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operator_().data(), this->operator_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VideoRecord.Operator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VideoRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VideoRecord)
  return false;
#undef DO_
}

void VideoRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VideoRecord)
  // .VideoRecord.ControlType control = 1;
  if (this->control() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->control(), output);
  }

  // .VideoRecord.StatusType status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // string DeviceName = 3;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VideoRecord.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devicename(), output);
  }

  // string DeviceId = 4;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VideoRecord.DeviceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deviceid(), output);
  }

  // string Operator = 5;
  if (this->operator_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operator_().data(), this->operator_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VideoRecord.Operator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->operator_(), output);
  }

  // @@protoc_insertion_point(serialize_end:VideoRecord)
}

::google::protobuf::uint8* VideoRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VideoRecord)
  // .VideoRecord.ControlType control = 1;
  if (this->control() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->control(), target);
  }

  // .VideoRecord.StatusType status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // string DeviceName = 3;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VideoRecord.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicename(), target);
  }

  // string DeviceId = 4;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VideoRecord.DeviceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceid(), target);
  }

  // string Operator = 5;
  if (this->operator_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operator_().data(), this->operator_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VideoRecord.Operator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->operator_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VideoRecord)
  return target;
}

size_t VideoRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoRecord)
  size_t total_size = 0;

  // string DeviceName = 3;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // string DeviceId = 4;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // string Operator = 5;
  if (this->operator_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operator_());
  }

  // .VideoRecord.ControlType control = 1;
  if (this->control() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->control());
  }

  // .VideoRecord.StatusType status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoRecord)
    MergeFrom(*source);
  }
}

void VideoRecord::MergeFrom(const VideoRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.operator_().size() > 0) {

    operator__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operator__);
  }
  if (from.control() != 0) {
    set_control(from.control());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void VideoRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRecord::CopyFrom(const VideoRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecord::IsInitialized() const {
  return true;
}

void VideoRecord::Swap(VideoRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoRecord::InternalSwap(VideoRecord* other) {
  devicename_.Swap(&other->devicename_);
  deviceid_.Swap(&other->deviceid_);
  operator__.Swap(&other->operator__);
  std::swap(control_, other->control_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoRecord::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoRecord

// .VideoRecord.ControlType control = 1;
void VideoRecord::clear_control() {
  control_ = 0;
}
::VideoRecord_ControlType VideoRecord::control() const {
  // @@protoc_insertion_point(field_get:VideoRecord.control)
  return static_cast< ::VideoRecord_ControlType >(control_);
}
void VideoRecord::set_control(::VideoRecord_ControlType value) {
  
  control_ = value;
  // @@protoc_insertion_point(field_set:VideoRecord.control)
}

// .VideoRecord.StatusType status = 2;
void VideoRecord::clear_status() {
  status_ = 0;
}
::VideoRecord_StatusType VideoRecord::status() const {
  // @@protoc_insertion_point(field_get:VideoRecord.status)
  return static_cast< ::VideoRecord_StatusType >(status_);
}
void VideoRecord::set_status(::VideoRecord_StatusType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:VideoRecord.status)
}

// string DeviceName = 3;
void VideoRecord::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoRecord::devicename() const {
  // @@protoc_insertion_point(field_get:VideoRecord.DeviceName)
  return devicename_.GetNoArena();
}
void VideoRecord::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VideoRecord.DeviceName)
}
#if LANG_CXX11
void VideoRecord::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VideoRecord.DeviceName)
}
#endif
void VideoRecord::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VideoRecord.DeviceName)
}
void VideoRecord::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VideoRecord.DeviceName)
}
::std::string* VideoRecord::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:VideoRecord.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoRecord::release_devicename() {
  // @@protoc_insertion_point(field_release:VideoRecord.DeviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoRecord::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:VideoRecord.DeviceName)
}

// string DeviceId = 4;
void VideoRecord::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoRecord::deviceid() const {
  // @@protoc_insertion_point(field_get:VideoRecord.DeviceId)
  return deviceid_.GetNoArena();
}
void VideoRecord::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VideoRecord.DeviceId)
}
#if LANG_CXX11
void VideoRecord::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VideoRecord.DeviceId)
}
#endif
void VideoRecord::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VideoRecord.DeviceId)
}
void VideoRecord::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VideoRecord.DeviceId)
}
::std::string* VideoRecord::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:VideoRecord.DeviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoRecord::release_deviceid() {
  // @@protoc_insertion_point(field_release:VideoRecord.DeviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoRecord::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:VideoRecord.DeviceId)
}

// string Operator = 5;
void VideoRecord::clear_operator_() {
  operator__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoRecord::operator_() const {
  // @@protoc_insertion_point(field_get:VideoRecord.Operator)
  return operator__.GetNoArena();
}
void VideoRecord::set_operator_(const ::std::string& value) {
  
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VideoRecord.Operator)
}
#if LANG_CXX11
void VideoRecord::set_operator_(::std::string&& value) {
  
  operator__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VideoRecord.Operator)
}
#endif
void VideoRecord::set_operator_(const char* value) {
  
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VideoRecord.Operator)
}
void VideoRecord::set_operator_(const char* value, size_t size) {
  
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VideoRecord.Operator)
}
::std::string* VideoRecord::mutable_operator_() {
  
  // @@protoc_insertion_point(field_mutable:VideoRecord.Operator)
  return operator__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoRecord::release_operator_() {
  // @@protoc_insertion_point(field_release:VideoRecord.Operator)
  
  return operator__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoRecord::set_allocated_operator_(::std::string* operator_) {
  if (operator_ != NULL) {
    
  } else {
    
  }
  operator__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operator_);
  // @@protoc_insertion_point(field_set_allocated:VideoRecord.Operator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMessagetypeFieldNumber;
const int Message::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 0;
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  SharedDtor();
}

void Message::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4].descriptor;
}

const Message& Message::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 0;
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Message.MessageType messagetype = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_messagetype(static_cast< ::Message_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message)
  // .Message.MessageType messagetype = 1;
  if (this->messagetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  // .Message.MessageType messagetype = 1;
  if (this->messagetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .Message.MessageType messagetype = 1;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.messagetype() != 0) {
    set_messagetype(from.messagetype());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  data_.Swap(&other->data_);
  std::swap(messagetype_, other->messagetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// .Message.MessageType messagetype = 1;
void Message::clear_messagetype() {
  messagetype_ = 0;
}
::Message_MessageType Message::messagetype() const {
  // @@protoc_insertion_point(field_get:Message.messagetype)
  return static_cast< ::Message_MessageType >(messagetype_);
}
void Message::set_messagetype(::Message_MessageType value) {
  
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:Message.messagetype)
}

// bytes data = 2;
void Message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:Message.data)
  return data_.GetNoArena();
}
void Message::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.data)
}
#if LANG_CXX11
void Message::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.data)
}
#endif
void Message::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.data)
}
void Message::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.data)
}
::std::string* Message::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_data() {
  // @@protoc_insertion_point(field_release:Message.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Message.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
