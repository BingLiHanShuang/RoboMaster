// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protocol.proto</summary>
public static partial class ProtocolReflection {

  #region Descriptor
  /// <summary>File descriptor for protocol.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtocolReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5wcm90b2NvbC5wcm90byIgCghQb3NQb2ludBIJCgF4GAEgASgCEgkKAXkY",
          "AiABKAIigwEKClNjYW5SZXN1bHQSGwoIcG9zaXRpb24YASADKAsyCS5Qb3NQ",
          "b2ludBIeCgtwaWNydXRlc2l6ZRgEIAEoCzIJLlBvc1BvaW50Eg4KBnJlc3Vs",
          "dBgCIAEoCRINCgVhbmdsZRgDIAEoAhIZCgZjZW50ZXIYBSABKAsyCS5Qb3NQ",
          "b2ludCIoCgdQYWRQYXNzEgsKA3BhZBgBIAEoDBIQCghwYXNzd29yZBgCIAEo",
          "DCL5AQoLVmlkZW9SZWNvcmQSKQoHY29udHJvbBgBIAEoDjIYLlZpZGVvUmVj",
          "b3JkLkNvbnRyb2xUeXBlEicKBnN0YXR1cxgCIAEoDjIXLlZpZGVvUmVjb3Jk",
          "LlN0YXR1c1R5cGUSEgoKRGV2aWNlTmFtZRgDIAEoCRIQCghEZXZpY2VJZBgE",
          "IAEoCRIQCghPcGVyYXRvchgFIAEoCSI4CgtDb250cm9sVHlwZRIICgROVUxM",
          "EAASCQoFU3RhcnQQARIICgRTdG9wEAISCgoGU3RhdHVzEAMiJAoKU3RhdHVz",
          "VHlwZRINCglSZWNvcmRpbmcQABIHCgNPZmYQASKJAQoHTWVzc2FnZRIpCgtt",
          "ZXNzYWdldHlwZRgBIAEoDjIULk1lc3NhZ2UuTWVzc2FnZVR5cGUSDAoEZGF0",
          "YRgCIAEoDCJFCgtNZXNzYWdlVHlwZRIICgROVUxMEAASDgoKU2NhblJlc3Vs",
          "dBABEgsKB1BhZFBhc3MQAhIPCgtWaWRlb1JlY29yZBADYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PosPoint), global::PosPoint.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ScanResult), global::ScanResult.Parser, new[]{ "Position", "Picrutesize", "Result", "Angle", "Center" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PadPass), global::PadPass.Parser, new[]{ "Pad", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VideoRecord), global::VideoRecord.Parser, new[]{ "Control", "Status", "DeviceName", "DeviceId", "Operator" }, null, new[]{ typeof(global::VideoRecord.Types.ControlType), typeof(global::VideoRecord.Types.StatusType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Message), global::Message.Parser, new[]{ "Messagetype", "Data" }, null, new[]{ typeof(global::Message.Types.MessageType) }, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class PosPoint : pb::IMessage<PosPoint> {
  private static readonly pb::MessageParser<PosPoint> _parser = new pb::MessageParser<PosPoint>(() => new PosPoint());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PosPoint> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosPoint() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosPoint(PosPoint other) : this() {
    x_ = other.x_;
    y_ = other.y_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosPoint Clone() {
    return new PosPoint(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PosPoint);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PosPoint other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PosPoint other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class ScanResult : pb::IMessage<ScanResult> {
  private static readonly pb::MessageParser<ScanResult> _parser = new pb::MessageParser<ScanResult>(() => new ScanResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ScanResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScanResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScanResult(ScanResult other) : this() {
    position_ = other.position_.Clone();
    Picrutesize = other.picrutesize_ != null ? other.Picrutesize.Clone() : null;
    result_ = other.result_;
    angle_ = other.angle_;
    Center = other.center_ != null ? other.Center.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScanResult Clone() {
    return new ScanResult(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PosPoint> _repeated_position_codec
      = pb::FieldCodec.ForMessage(10, global::PosPoint.Parser);
  private readonly pbc::RepeatedField<global::PosPoint> position_ = new pbc::RepeatedField<global::PosPoint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PosPoint> Position {
    get { return position_; }
  }

  /// <summary>Field number for the "picrutesize" field.</summary>
  public const int PicrutesizeFieldNumber = 4;
  private global::PosPoint picrutesize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PosPoint Picrutesize {
    get { return picrutesize_; }
    set {
      picrutesize_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private string result_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Result {
    get { return result_; }
    set {
      result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 3;
  private float angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "center" field.</summary>
  public const int CenterFieldNumber = 5;
  private global::PosPoint center_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PosPoint Center {
    get { return center_; }
    set {
      center_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ScanResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ScanResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!position_.Equals(other.position_)) return false;
    if (!object.Equals(Picrutesize, other.Picrutesize)) return false;
    if (Result != other.Result) return false;
    if (Angle != other.Angle) return false;
    if (!object.Equals(Center, other.Center)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= position_.GetHashCode();
    if (picrutesize_ != null) hash ^= Picrutesize.GetHashCode();
    if (Result.Length != 0) hash ^= Result.GetHashCode();
    if (Angle != 0F) hash ^= Angle.GetHashCode();
    if (center_ != null) hash ^= Center.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    position_.WriteTo(output, _repeated_position_codec);
    if (Result.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Result);
    }
    if (Angle != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Angle);
    }
    if (picrutesize_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Picrutesize);
    }
    if (center_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Center);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += position_.CalculateSize(_repeated_position_codec);
    if (picrutesize_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Picrutesize);
    }
    if (Result.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
    }
    if (Angle != 0F) {
      size += 1 + 4;
    }
    if (center_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ScanResult other) {
    if (other == null) {
      return;
    }
    position_.Add(other.position_);
    if (other.picrutesize_ != null) {
      if (picrutesize_ == null) {
        picrutesize_ = new global::PosPoint();
      }
      Picrutesize.MergeFrom(other.Picrutesize);
    }
    if (other.Result.Length != 0) {
      Result = other.Result;
    }
    if (other.Angle != 0F) {
      Angle = other.Angle;
    }
    if (other.center_ != null) {
      if (center_ == null) {
        center_ = new global::PosPoint();
      }
      Center.MergeFrom(other.Center);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          position_.AddEntriesFrom(input, _repeated_position_codec);
          break;
        }
        case 18: {
          Result = input.ReadString();
          break;
        }
        case 29: {
          Angle = input.ReadFloat();
          break;
        }
        case 34: {
          if (picrutesize_ == null) {
            picrutesize_ = new global::PosPoint();
          }
          input.ReadMessage(picrutesize_);
          break;
        }
        case 42: {
          if (center_ == null) {
            center_ = new global::PosPoint();
          }
          input.ReadMessage(center_);
          break;
        }
      }
    }
  }

}

public sealed partial class PadPass : pb::IMessage<PadPass> {
  private static readonly pb::MessageParser<PadPass> _parser = new pb::MessageParser<PadPass>(() => new PadPass());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PadPass> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PadPass() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PadPass(PadPass other) : this() {
    pad_ = other.pad_;
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PadPass Clone() {
    return new PadPass(this);
  }

  /// <summary>Field number for the "pad" field.</summary>
  public const int PadFieldNumber = 1;
  private pb::ByteString pad_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Pad {
    get { return pad_; }
    set {
      pad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private pb::ByteString password_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PadPass);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PadPass other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pad != other.Pad) return false;
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pad.Length != 0) hash ^= Pad.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pad.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Pad);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pad.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Pad);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PadPass other) {
    if (other == null) {
      return;
    }
    if (other.Pad.Length != 0) {
      Pad = other.Pad;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Pad = input.ReadBytes();
          break;
        }
        case 18: {
          Password = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class VideoRecord : pb::IMessage<VideoRecord> {
  private static readonly pb::MessageParser<VideoRecord> _parser = new pb::MessageParser<VideoRecord>(() => new VideoRecord());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VideoRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VideoRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VideoRecord(VideoRecord other) : this() {
    control_ = other.control_;
    status_ = other.status_;
    deviceName_ = other.deviceName_;
    deviceId_ = other.deviceId_;
    operator_ = other.operator_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VideoRecord Clone() {
    return new VideoRecord(this);
  }

  /// <summary>Field number for the "control" field.</summary>
  public const int ControlFieldNumber = 1;
  private global::VideoRecord.Types.ControlType control_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VideoRecord.Types.ControlType Control {
    get { return control_; }
    set {
      control_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private global::VideoRecord.Types.StatusType status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VideoRecord.Types.StatusType Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "DeviceName" field.</summary>
  public const int DeviceNameFieldNumber = 3;
  private string deviceName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceName {
    get { return deviceName_; }
    set {
      deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "DeviceId" field.</summary>
  public const int DeviceIdFieldNumber = 4;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Operator" field.</summary>
  public const int OperatorFieldNumber = 5;
  private string operator_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Operator {
    get { return operator_; }
    set {
      operator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VideoRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VideoRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Control != other.Control) return false;
    if (Status != other.Status) return false;
    if (DeviceName != other.DeviceName) return false;
    if (DeviceId != other.DeviceId) return false;
    if (Operator != other.Operator) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Control != 0) hash ^= Control.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Operator.Length != 0) hash ^= Operator.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Control != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Control);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Status);
    }
    if (DeviceName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DeviceName);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DeviceId);
    }
    if (Operator.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Operator);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Control != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Control);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (DeviceName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Operator.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Operator);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VideoRecord other) {
    if (other == null) {
      return;
    }
    if (other.Control != 0) {
      Control = other.Control;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.DeviceName.Length != 0) {
      DeviceName = other.DeviceName;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Operator.Length != 0) {
      Operator = other.Operator;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          control_ = (global::VideoRecord.Types.ControlType) input.ReadEnum();
          break;
        }
        case 16: {
          status_ = (global::VideoRecord.Types.StatusType) input.ReadEnum();
          break;
        }
        case 26: {
          DeviceName = input.ReadString();
          break;
        }
        case 34: {
          DeviceId = input.ReadString();
          break;
        }
        case 42: {
          Operator = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the VideoRecord message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ControlType {
      [pbr::OriginalName("NULL")] Null = 0,
      [pbr::OriginalName("Start")] Start = 1,
      [pbr::OriginalName("Stop")] Stop = 2,
      [pbr::OriginalName("Status")] Status = 3,
    }

    public enum StatusType {
      [pbr::OriginalName("Recording")] Recording = 0,
      [pbr::OriginalName("Off")] Off = 1,
    }

  }
  #endregion

}

public sealed partial class Message : pb::IMessage<Message> {
  private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Message> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message(Message other) : this() {
    messagetype_ = other.messagetype_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message Clone() {
    return new Message(this);
  }

  /// <summary>Field number for the "messagetype" field.</summary>
  public const int MessagetypeFieldNumber = 1;
  private global::Message.Types.MessageType messagetype_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Message.Types.MessageType Messagetype {
    get { return messagetype_; }
    set {
      messagetype_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Message);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Message other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Messagetype != other.Messagetype) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Messagetype != 0) hash ^= Messagetype.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Messagetype != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Messagetype);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Messagetype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Messagetype);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Message other) {
    if (other == null) {
      return;
    }
    if (other.Messagetype != 0) {
      Messagetype = other.Messagetype;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          messagetype_ = (global::Message.Types.MessageType) input.ReadEnum();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Message message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum MessageType {
      [pbr::OriginalName("NULL")] Null = 0,
      [pbr::OriginalName("ScanResult")] ScanResult = 1,
      [pbr::OriginalName("PadPass")] PadPass = 2,
      [pbr::OriginalName("VideoRecord")] VideoRecord = 3,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
